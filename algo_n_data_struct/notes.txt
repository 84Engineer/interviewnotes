O-notation

Учитывается только тот фактор (функция), которая растет быстрее всего (по мере роста элементов)
Т.е. n^3 + n = O(n^3)

Фактически, любая программа, не содержащая циклы, имеет f( n ) = 1
Одиночный цикл от 1 до n, даёт асимптотику f( n ) = n, поскольку до и после цикла выполняет неизменное число команд, а постоянное же количество инструкций внутри цикла выполняется n раз.
Два вложенных цикла дадут нам асимптотику вида f( n ) = n2.

О-сложность алгоритма представляет собой верхний предел его настоящей сложности, Θ - (тета) - реальная сложность
т.е. программа не може быть хуже О.
Ω даёт нам сложность, лучше которой наша программа быть не может
Например, высказывание, что алгоритм является Ω( n3 ), означает, что алгоритм не лучше, чем n3. 
Он может быть Θ( n3 ), или Θ( n4 ), или ещё хуже, но мы будем знать предел его «хорошести»
 Аналогично ο, мы можем писать ω, если знаем, что этот предел нестрогий
 
 Оператор сравнения асимптотических оценок	Оператор сравнения чисел
Алгоритм является o( что-то )	Число < чего-то
Алгоритм является O( что-то )	Число ≤ чего-то
Алгоритм является Θ( что-то )	Число = чему-то
Алгоритм является Ω( что-то )	Число ≥ чего-то
Алгоритм является ω( что-то )	Число > чего-то